version: v1.0
name: "libschemaregistry build pipeline"
agent:
  machine:
    type: s1-prod-ubuntu24-04-amd64-1
execution_time_limit:
  hours: 4
queue:
  processing: parallel

blocks:
  - name: "Build and Test - Linux GCC"
    task:
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "x64-linux-release"
        - name: VCPKG_HOST_TRIPLET
          value: "x64-linux-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "gcc"
        - name: CXX_COMPILER
          value: "g++"
      
      prologue:
        commands:
          - checkout
          - sem-version java 11
          - cache restore cmake-build-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-$SEMAPHORE_GIT_BRANCH,cmake-build
          
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies
            - sudo apt-get update
            - sudo apt-get install -y ninja-build cmake pkg-config curl zip unzip tar
            
            # Setup vcpkg
            - |
              if [ ! -d "/tmp/vcpkg" ]; then
                git clone https://github.com/Microsoft/vcpkg.git /tmp/vcpkg
                /tmp/vcpkg/bootstrap-vcpkg.sh
              fi
            
            # Configure CMake
            - |
              cmake -G Ninja -B build \
                -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
                -DCMAKE_C_COMPILER=$C_COMPILER \
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=$VCPKG_TARGET_TRIPLET \
                -DVCPKG_HOST_TRIPLET=$VCPKG_HOST_TRIPLET \
                -DVCPKG_BUILD_TYPE=release \
                -S .
            
            # Build
            - cmake --build build --config $BUILD_TYPE
            
            # Test
            - cd build && ctest --build-config $BUILD_TYPE
      
      epilogue:
        commands:
          - cache store cmake-build-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build

  - name: "Build and Test - macOS Clang"
    agent:
      machine:
        type: s1-prod-macos-13-5-arm64
    task:
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "arm64-osx-release"
        - name: VCPKG_HOST_TRIPLET
          value: "arm64-osx-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "clang"
        - name: CXX_COMPILER
          value: "clang++"
      
      prologue:
        commands:
          - checkout
          - brew install openjdk@11
          - sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk
          - export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk-11.jdk/Contents/Home
          - export PATH="$JAVA_HOME/bin:$PATH"
          - cache restore cmake-build-macos-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-macos-$SEMAPHORE_GIT_BRANCH,cmake-build-macos
          
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies
            - brew install ninja cmake
            
            # Setup vcpkg
            - |
              if [ ! -d "/tmp/vcpkg" ]; then
                git clone https://github.com/Microsoft/vcpkg.git /tmp/vcpkg
                /tmp/vcpkg/bootstrap-vcpkg.sh
              fi
            
            # Configure CMake
            - |
              cmake -G Ninja -B build \
                -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
                -DCMAKE_C_COMPILER=$C_COMPILER \
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=$VCPKG_TARGET_TRIPLET \
                -DVCPKG_HOST_TRIPLET=$VCPKG_HOST_TRIPLET \
                -DVCPKG_BUILD_TYPE=release \
                -S .
            
            # Build
            - cmake --build build --config $BUILD_TYPE
            
            # Test
            - cd build && ctest --build-config $BUILD_TYPE
      
      epilogue:
        commands:
          - cache store cmake-build-macos-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build

  - name: "Build and Test - Windows MSVC"
    agent:
      machine:
        type: s1-prod-windows
    task:
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "x64-windows-release"
        - name: VCPKG_HOST_TRIPLET
          value: "x64-windows-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "cl"
        - name: CXX_COMPILER
          value: "cl"
      
      prologue:
        commands:
          - checkout
          - choco install openjdk11 -y
          - refreshenv
          - cache restore cmake-build-windows-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-windows-$SEMAPHORE_GIT_BRANCH,cmake-build-windows
          
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies
            - choco install -y ninja cmake
            
            # Setup MSVC environment
            - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            
            # Setup vcpkg
            - |
              if not exist "C:\vcpkg" (
                git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
                C:\vcpkg\bootstrap-vcpkg.bat
              )
            
            # Configure CMake
            - |
              cmake -G Ninja -B build ^
                -DCMAKE_CXX_COMPILER=%CXX_COMPILER% ^
                -DCMAKE_C_COMPILER=%C_COMPILER% ^
                -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
                -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake ^
                -DVCPKG_TARGET_TRIPLET=%VCPKG_TARGET_TRIPLET% ^
                -DVCPKG_HOST_TRIPLET=%VCPKG_HOST_TRIPLET% ^
                -DVCPKG_BUILD_TYPE=release ^
                -S .
            
            # Build
            - cmake --build build --config %BUILD_TYPE%
            
            # Test
            - cd build && ctest --build-config %BUILD_TYPE%
      
      epilogue:
        commands:
          - cache store cmake-build-windows-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build
