version: v1.0
name: "libschemaregistry build pipeline"
agent:
  machine:
    type: s1-prod-ubuntu24-04-amd64-1
execution_time_limit:
  hours: 4
queue:
  processing: parallel

blocks:
  - name: "Build and Test - Ubuntu GCC"
    dependencies: []
    task:
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "x64-linux-release"
        - name: VCPKG_HOST_TRIPLET
          value: "x64-linux-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "gcc"
        - name: CXX_COMPILER
          value: "g++"
      
      prologue:
        commands:
          - checkout
          - sem-version java 11
          - cache restore cmake-build-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-$SEMAPHORE_GIT_BRANCH,cmake-build
          
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies
            - sudo apt-get update
            - sudo apt-get install -y ninja-build cmake pkg-config curl zip unzip tar
            
            # Setup vcpkg
            - |
              if [ ! -d "/tmp/vcpkg" ]; then
                git clone https://github.com/Microsoft/vcpkg.git /tmp/vcpkg
                /tmp/vcpkg/bootstrap-vcpkg.sh
              fi
            
            # Configure CMake
            - |
              cmake -G Ninja -B build \
                -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
                -DCMAKE_C_COMPILER=$C_COMPILER \
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=$VCPKG_TARGET_TRIPLET \
                -DVCPKG_HOST_TRIPLET=$VCPKG_HOST_TRIPLET \
                -DVCPKG_BUILD_TYPE=release \
                -S .
            
            # Build
            - cmake --build build --config $BUILD_TYPE
            
            # Test
            - cd build && ctest --build-config $BUILD_TYPE
      
      epilogue:
        commands:
          - cache store cmake-build-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build

  - name: "Build and Test - RHEL 9 GCC"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-rhel-9-amd64-1
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "x64-linux-release"
        - name: VCPKG_HOST_TRIPLET
          value: "x64-linux-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "gcc"
        - name: CXX_COMPILER
          value: "g++"
      prologue:
        commands:
          - checkout
          - sudo dnf -y install java-11-openjdk java-11-openjdk-devel
          - |
            export JENV_ROOT="$HOME/.jenv"
            export PATH="$JENV_ROOT/bin:$PATH"
            if command -v jenv >/dev/null 2>&1; then
              eval "$(jenv init -)"
              JDK_HOME=$(ls -d /usr/lib/jvm/java-11-openjdk-* 2>/dev/null | head -n 1)
              if [ -n "$JDK_HOME" ]; then jenv add "$JDK_HOME" || true; fi
              VER=$(jenv versions --bare | awk '/^11\./{print; exit}')
              if [ -n "$VER" ]; then jenv global "$VER"; jenv rehash; fi
            fi
            java -version
          - cache restore cmake-build-rhel9-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-rhel9-$SEMAPHORE_GIT_BRANCH,cmake-build-rhel9
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies (ninja via EPEL or fallback, modern CMake from Kitware)
            - |
              set -e
              sudo dnf -y install gcc gcc-c++ pkgconf-pkg-config curl zip unzip tar git perl patch
              # OpenSSL build prereqs
              sudo dnf -y install kernel-headers || true
              # Provide IPC::Cmd for Perl
              sudo dnf -y install 'perl(IPC::Cmd)' || true
              # Try EPEL for ninja-build
              sudo dnf -y install epel-release || true
              if ! sudo dnf -y install ninja-build; then
                echo "ninja-build not found in repos; installing prebuilt ninja"
                curl -Ls https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip -o /tmp/ninja.zip
                sudo unzip -o /tmp/ninja.zip -d /usr/local/bin
                sudo chmod +x /usr/local/bin/ninja
              fi
              # Upgrade CMake to >=3.22 (use Kitware prebuilt)
              CMAKE_VER=3.29.6
              curl -Ls https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}-linux-x86_64.tar.gz -o /tmp/cmake.tgz
              sudo tar -C /opt -xzf /tmp/cmake.tgz
              sudo ln -sf /opt/cmake-${CMAKE_VER}-linux-x86_64/bin/cmake /usr/local/bin/cmake
              sudo ln -sf /opt/cmake-${CMAKE_VER}-linux-x86_64/bin/ctest /usr/local/bin/ctest
              sudo ln -sf /opt/cmake-${CMAKE_VER}-linux-x86_64/bin/cpack /usr/local/bin/cpack
              cmake --version
              ninja --version
            
            # Setup vcpkg
            - |
              if [ ! -d "/tmp/vcpkg" ]; then
                git clone https://github.com/Microsoft/vcpkg.git /tmp/vcpkg
                /tmp/vcpkg/bootstrap-vcpkg.sh
              fi
            
            # Configure CMake
            - |
              NINJA_BIN=$(command -v ninja || echo /usr/local/bin/ninja)
              cmake -G Ninja -B build \
                -DCMAKE_MAKE_PROGRAM=${NINJA_BIN} \
                -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
                -DCMAKE_C_COMPILER=$C_COMPILER \
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=$VCPKG_TARGET_TRIPLET \
                -DVCPKG_HOST_TRIPLET=$VCPKG_HOST_TRIPLET \
                -DVCPKG_BUILD_TYPE=release \
                -S .
            
            # Build
            - cmake --build build --config $BUILD_TYPE
            
            # Test
            - cd build && ctest --build-config $BUILD_TYPE
      epilogue:
        commands:
          - cache store cmake-build-rhel9-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build

  - name: "Build and Test - macOS Clang"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-arm64
      
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "arm64-osx-release"
        - name: VCPKG_HOST_TRIPLET
          value: "arm64-osx-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "clang"
        - name: CXX_COMPILER
          value: "clang++"
      
      prologue:
        commands:
          - checkout
          - brew install openjdk@11
          - export HOMEBREW_PREFIX="$(brew --prefix)"
          - sudo ln -sfn "$HOMEBREW_PREFIX/opt/openjdk@11/libexec/openjdk.jdk" /Library/Java/JavaVirtualMachines/openjdk-11.jdk
          - export JAVA_HOME="$(/usr/libexec/java_home -v 11)"
          - export PATH="$JAVA_HOME/bin:$PATH"
          - java -version
          - cache restore cmake-build-macos-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-macos-$SEMAPHORE_GIT_BRANCH,cmake-build-macos
          
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies
            - brew install ninja cmake
            
            # Setup vcpkg
            - |
              if [ ! -d "/tmp/vcpkg" ]; then
                git clone https://github.com/Microsoft/vcpkg.git /tmp/vcpkg
                /tmp/vcpkg/bootstrap-vcpkg.sh
              fi
            
            # Configure CMake
            - |
              cmake -G Ninja -B build \
                -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
                -DCMAKE_C_COMPILER=$C_COMPILER \
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_TARGET_TRIPLET=$VCPKG_TARGET_TRIPLET \
                -DVCPKG_HOST_TRIPLET=$VCPKG_HOST_TRIPLET \
                -DVCPKG_BUILD_TYPE=release \
                -S .
            
            # Build
            - cmake --build build --config $BUILD_TYPE
            
            # Test
            - cd build && ctest --build-config $BUILD_TYPE
      
      epilogue:
        commands:
          - cache store cmake-build-macos-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build

  - name: "Build and Test - Windows MSVC"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-windows 
      
      env_vars:
        - name: VCPKG_TARGET_TRIPLET
          value: "x64-windows-release"
        - name: VCPKG_HOST_TRIPLET
          value: "x64-windows-release"
        - name: VCPKG_DEFAULT_TRIPLET
          value: "x64-windows-release"
        - name: BUILD_TYPE
          value: "Release"
        - name: C_COMPILER
          value: "cl"
        - name: CXX_COMPILER
          value: "cl"
      
      prologue:
        commands:
          - checkout
          - choco install openjdk11 -y
          - cache restore cmake-build-windows-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID,cmake-build-windows-$SEMAPHORE_GIT_BRANCH,cmake-build-windows
          
      jobs:
        - name: Build and Test
          commands:
            # Install dependencies
            - choco install -y ninja cmake visualstudio2022buildtools visualstudio2022-workload-vctools
            - |
              $chocoBin = Join-Path $env:ChocolateyInstall 'bin'
              if (Test-Path $chocoBin) { $env:PATH = "$chocoBin;$env:PATH" }
              $profileModule = Join-Path $env:ChocolateyInstall 'helpers\chocolateyProfile.psm1'
              if (Test-Path $profileModule) { Import-Module $profileModule; if (Get-Command refreshenv -ErrorAction SilentlyContinue) { refreshenv } }
              $cmakeBin = 'C:\Program Files\CMake\bin'
              if (Test-Path $cmakeBin) { $env:PATH = "$cmakeBin;$env:PATH" }
              cmake --version
              ninja --version
              $javaCmd = Get-Command java -ErrorAction SilentlyContinue
              if (-not $javaCmd) {
                $roots = @(
                  'C:\\Program Files\\OpenJDK',
                  'C:\\Program Files\\Eclipse Adoptium',
                  'C:\\Program Files\\AdoptOpenJDK',
                  'C:\\Program Files\\Java'
                )
                foreach ($root in $roots) {
                  if (Test-Path $root) {
                    $jdkDir = Get-ChildItem $root -Directory -ErrorAction SilentlyContinue | Sort-Object Name -Descending | Select-Object -First 1
                    if ($jdkDir) {
                      $candidateBin = Join-Path $jdkDir.FullName 'bin'
                      if (Test-Path (Join-Path $candidateBin 'java.exe')) {
                        $env:JAVA_HOME = $jdkDir.FullName
                        $env:PATH = $candidateBin + ';' + $env:PATH
                        break
                      }
                    }
                  }
                }
              }
              if (-not (Get-Command java -ErrorAction SilentlyContinue)) {
                choco install -y temurin11
                if (Test-Path $profileModule) { Import-Module $profileModule; if (Get-Command refreshenv -ErrorAction SilentlyContinue) { refreshenv } }
                $adoptiumRoot = 'C:\\Program Files\\Eclipse Adoptium'
                if (Test-Path $adoptiumRoot) {
                  $jdkDir = Get-ChildItem $adoptiumRoot -Directory -ErrorAction SilentlyContinue | Sort-Object Name -Descending | Select-Object -First 1
                  if ($jdkDir) {
                    $env:JAVA_HOME = $jdkDir.FullName
                    $env:PATH = (Join-Path $env:JAVA_HOME 'bin') + ';' + $env:PATH
                  }
                }
              }
              java -version
            
            # Setup MSVC environment
            - |
              $vcvars = $null
              # Prefer Visual Studio 2022 first
              $preferred = @(
                'C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat',
                'C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Auxiliary\\Build\\vcvars64.bat',
                'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat',
                'C:\\Program Files\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat'
              )
              foreach ($p in $preferred) { if (Test-Path $p) { $vcvars = $p; break } }
              if (-not $vcvars) {
                $vswhere = "${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe"
                if (Test-Path $vswhere) {
                  $vsPath = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -version "[17.0,18.0)" -property installationPath
                  if ($vsPath) {
                    $candidate = Join-Path $vsPath 'VC\\Auxiliary\\Build\\vcvars64.bat'
                    if (Test-Path $candidate) { $vcvars = $candidate }
                  }
                }
              }
              if (-not $vcvars) {
                $fallback = @(
                  'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat',
                  'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvars64.bat',
                  'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat',
                  'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat'
                )
                foreach ($p in $fallback) { if (Test-Path $p) { $vcvars = $p; break } }
              }
              if (-not $vcvars) { throw "vcvars64.bat not found" }
              cmd /c "`"$vcvars`" && set" | ForEach-Object {
                if ($_ -match '^(.*?)=(.*)$') {
                  [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                }
              }
            
            # Setup vcpkg
            - |
              if (!(Test-Path "C:\\vcpkg")) {
                git clone https://github.com/Microsoft/vcpkg.git C:\\vcpkg
                & C:\\vcpkg\\bootstrap-vcpkg.bat -disableMetrics
              } else {
                git -C C:\\vcpkg pull --ff-only
                if (Test-Path C:\\vcpkg\\bootstrap-vcpkg.bat) { & C:\\vcpkg\\bootstrap-vcpkg.bat -disableMetrics }
              }
            
            # Configure CMake
            - |
              $ninja = $null
              $candidates = @(
                (Get-Command ninja -ErrorAction SilentlyContinue).Path,
                'C:\\ProgramData\\chocolatey\\bin\\ninja.exe',
                'C:\\Program Files\\Ninja\\ninja.exe',
                'C:\\Tools\\ninja\\ninja.exe'
              )
              foreach ($p in $candidates) { if ($p -and (Test-Path $p)) { $ninja = $p; break } }
              if (-not $ninja) { throw 'Ninja not found on PATH after install' }
              cmake -G Ninja -B build `
                -DCMAKE_MAKE_PROGRAM="${ninja}" `
                -DCMAKE_BUILD_TYPE=Release `
                -DCMAKE_C_COMPILER=cl `
                -DCMAKE_CXX_COMPILER=cl `
                -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
                -DVCPKG_TARGET_TRIPLET=x64-windows-release `
                -DVCPKG_HOST_TRIPLET=x64-windows-release `
                -DVCPKG_BUILD_TYPE=release `
                -S .
            
            # Build
            - cmake --build build --config Release
            
            # Test
            - cd build && ctest --build-config Release
      
      epilogue:
        commands:
          - cache store cmake-build-windows-$SEMAPHORE_GIT_BRANCH-$SEMAPHORE_WORKFLOW_ID build
